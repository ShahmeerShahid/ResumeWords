{"version":3,"sources":["components/HeaderAndFooter/index.js","components/ExampleLinks/index.js","components/UserInput/index.js","components/ResultsList/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","h1","fontSize","base","sm","lg","letterSpacing","fontWeight","lineHeight","as","color","useColorModeValue","opacity","p","shadow","borderWidth","mt","Footer","links","label","icon","VscGithubInverted","url","height","textAlign","className","aria-label","role","href","isExternal","direction","spacing","justify","mb","map","link","index","key","display","exampleButtons","name","logo","AiFillLinkedin","SiIndeed","SiMonster","styles","buttonGrid","maxWidth","margin","buttonContainer","ExampleLinks","setFieldValue","style","columns","button","colorScheme","minWidth","disabled","onClick","window","open","mx","UserInput","num_words","isLoading","errors","handleSubmit","validateURL","asyncError","toast","useToast","useEffect","title","description","status","duration","isClosable","paddingTop","size","pr","placeholder","value","onChange","e","target","paddingLeft","width","children","isValid","length","Check","Close","renderURLValidationIcon","min","max","renderRow","resultsSlice","result","val","parseFloat","cursor","m","charAt","toUpperCase","slice","ResultsList","results","arr","Object","entries","rows","i","row","renderResults","ERR_MSGS","Schema","Yup","shape","required","EnhancedApp","withFormik","enableReinitialize","a","encoded_url","encodeURIComponent","request","fetch","then","res","text","message","Error","json","data","catch","error","response","mapPropsToValues","props","validationSchema","validateOnBlur","validateOnChange","values","justifyContent","pt","md","pb","flexDirection","id","validateSyncAt","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.be4e024e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Box,\r\n  Icon,\r\n  Link,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n  chakra,\r\n} from \"@chakra-ui/react\";\r\nimport { VscGithubInverted } from \"react-icons/vsc\";\r\n\r\nexport function Header() {\r\n  return (\r\n    <>\r\n      <chakra.h1\r\n        fontSize={{ base: \"2.25rem\", sm: \"3rem\", lg: \"3.75rem\" }}\r\n        letterSpacing=\"tight\"\r\n        fontWeight=\"bold\"\r\n        lineHeight=\"1.2\"\r\n      >\r\n        Resume\r\n        <Box as=\"span\" color={useColorModeValue(\"teal.500\", \"teal.300\")}>\r\n          Words\r\n        </Box>\r\n      </chakra.h1>\r\n      <Text opacity={0.5} fontSize={{ base: \"sm\", lg: \"md\" }}>\r\n        AI powered keyword extraction\r\n      </Text>\r\n      <Box p={5} shadow=\"md\" borderWidth=\"1px\" mt=\"6\">\r\n        <Text opacity={0.8} fontSize={{ base: \"lg\", lg: \"xl\" }}>\r\n          <Text as=\"strong\">Resume</Text>\r\n          <Box as=\"span\" color={useColorModeValue(\"teal.500\", \"teal.300\")}>\r\n            Words\r\n          </Box>{\" \"}\r\n          analyzes job descriptions using machine learning & informs you of\r\n          keywords you should include in your resume or cover letter when\r\n          applying.\r\n        </Text>\r\n        <Text opacity={0.8} fontSize={{ base: \"lg\", lg: \"xl\" }} mt=\"6\">\r\n          Paste the URL below, click \"Submit\", and wait for the results!\r\n        </Text>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function Footer() {\r\n  const links = [\r\n    {\r\n      label: \"Github\",\r\n      icon: VscGithubInverted,\r\n      url: \"https://github.com/ShahmeerShahid/ResumeWords/\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Box as=\"footer\" mt={12} height=\"100%\" textAlign=\"center\" className=\"app\">\r\n        <Text fontSize=\"sm\">\r\n          Made with{\" \"}\r\n          <span aria-label=\"heart\" role=\"img\">\r\n            &#128153;\r\n          </span>{\" \"}\r\n          by{\" \"}\r\n          <Link href=\"https://ca.linkedin.com/in/shahmeer-shahid\" isExternal>\r\n            Shahmeer Shahid\r\n          </Link>\r\n          ,{\" \"}\r\n          <Link\r\n            href=\"https://www.linkedin.com/in/lazar-lolic-207779184/\"\r\n            isExternal\r\n          >\r\n            Lazar Lolic\r\n          </Link>\r\n          , &{\" \"}\r\n          <Link href=\"http://jarrodservilla.com\" isExternal>\r\n            Jarrod Servilla\r\n          </Link>\r\n        </Text>\r\n        <Stack mt={4} direction=\"row\" spacing=\"12px\" justify=\"center\" mb={10}>\r\n          {links.map((link, index) => {\r\n            return (\r\n              <Link\r\n                key={index}\r\n                display=\"inline-block\"\r\n                href={link.url}\r\n                aria-label={link.label}\r\n                isExternal\r\n              >\r\n                <Icon as={link.icon} fontSize=\"xl\" color=\"gray.400\" />\r\n              </Link>\r\n            );\r\n          })}\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, SimpleGrid, Text } from \"@chakra-ui/react\";\r\nimport { AiFillLinkedin } from \"react-icons/ai\";\r\nimport { SiIndeed, SiMonster } from \"react-icons/si\";\r\n\r\nconst buttonWidth = \"170px\";\r\n\r\nconst exampleButtons = [\r\n  {\r\n    name: \"LinkedIn\",\r\n    logo: AiFillLinkedin,\r\n    link: \"https://www.linkedin.com/jobs/view/2255261986\",\r\n  },\r\n  {\r\n    name: \"Indeed\",\r\n    logo: SiIndeed,\r\n    link:\r\n      \"https://ca.indeed.com/viewjob?jk=0573fd7c2855c8e3&tk=1eo98g5too2f6800&from=serp&vjs=3\",\r\n  },\r\n  {\r\n    name: \"Monster\",\r\n    logo: SiMonster,\r\n    link:\r\n      \"https://job-openings.monster.ca/sr-finanial-analyst-langley-bc-ca-thomson-technology/221727383\",\r\n  },\r\n];\r\n\r\nlet styles = {\r\n  buttonGrid: {\r\n    maxWidth: \"100%\",\r\n    margin: \"1em auto\",\r\n  },\r\n  buttonContainer: {\r\n    margin: \"1vh 1vw\",\r\n  },\r\n};\r\n\r\nfunction newTab(url) {\r\n  window.open(url, \"_blank\");\r\n}\r\n\r\nfunction ExampleLinks({ setFieldValue }) {\r\n  return (\r\n    <div>\r\n      <Text opacity={0.7} fontSize={{ base: \"lg\", lg: \"xl\" }} mt=\"10\" mb=\"0\">\r\n        Example Links:\r\n      </Text>\r\n      <SimpleGrid style={styles.buttonGrid} columns={{ sm: 3 }}>\r\n        {exampleButtons.map((button, index) => (\r\n          <div style={styles.buttonContainer} key={index}>\r\n            <Button\r\n              key={`btn-${index}`}\r\n              colorScheme=\"blue\"\r\n              style={{ minWidth: buttonWidth }}\r\n              disabled={!button.link}\r\n              onClick={() => {\r\n                setFieldValue(\"url\", button.link);\r\n                newTab(button.link);\r\n              }}\r\n            >\r\n              <button.logo mx=\"1vw\" />\r\n              {\"\\u00A0\"} {button.name}\r\n            </Button>\r\n          </div>\r\n        ))}\r\n      </SimpleGrid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExampleLinks;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n  Spinner,\r\n  Stack,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { CheckIcon, CloseIcon } from \"@chakra-ui/icons\";\r\n\r\nfunction UserInput({\r\n  url,\r\n  num_words,\r\n  isLoading,\r\n  errors,\r\n  handleSubmit,\r\n  setFieldValue,\r\n  validateURL,\r\n  asyncError,\r\n}) {\r\n  function renderURLValidationIcon() {\r\n    const isValid = validateURL();\r\n    if (url.length === 0) {\r\n      return null;\r\n    } else if (!isValid) {\r\n      return <CloseIcon color=\"red.500\" />;\r\n    } else {\r\n      return <CheckIcon color=\"green.500\" />;\r\n    }\r\n  }\r\n  const toast = useToast();\r\n  useEffect(() => {\r\n    if (asyncError) {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: asyncError,\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n      setFieldValue(\"asyncError\", null);\r\n    }\r\n  }, [asyncError, setFieldValue, toast]);\r\n  return (\r\n    <div style={{ paddingTop: \"2vw\" }}>\r\n      <FormLabel>URL:</FormLabel>\r\n      <InputGroup size=\"lg\">\r\n        <Input\r\n          pr=\"6rem\"\r\n          placeholder=\"Link to job posting\"\r\n          value={url}\r\n          onChange={(e) => setFieldValue(\"url\", e.target.value)}\r\n        />\r\n        <InputRightElement\r\n          style={{ paddingLeft: \"7vw\" }}\r\n          width=\"7rem\"\r\n          children={renderURLValidationIcon()}\r\n        />\r\n      </InputGroup>\r\n      <br></br>\r\n      <FormLabel># of keywords:</FormLabel>\r\n      <Stack mt={4} direction=\"row\" spacing=\"12px\" justify=\"center\">\r\n        <NumberInput\r\n          aria-label=\"number of keywords\"\r\n          width=\"75%\"\r\n          min={0}\r\n          max={50}\r\n          value={num_words}\r\n          onChange={(value) => setFieldValue(\"num_words\", value)}\r\n        >\r\n          <NumberInputField aria-label=\"keyword-num-input\" />\r\n          <NumberInputStepper>\r\n            <NumberIncrementStepper />\r\n            <NumberDecrementStepper />\r\n          </NumberInputStepper>\r\n        </NumberInput>\r\n        <Button\r\n          aria-label=\"submit button\"\r\n          colorScheme=\"green\"\r\n          width=\"25%\"\r\n          onClick={handleSubmit}\r\n          disabled={isLoading}\r\n        >\r\n          {!isLoading ? \"Submit\" : <Spinner size=\"md\" />}\r\n        </Button>\r\n      </Stack>\r\n      <Text style={{ color: \"red\" }}>{errors && errors.url}</Text>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserInput;\r\n","import React from \"react\";\nimport {\n  Stack,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatGroup,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nfunction newTab(url) {\n  window.open(url, \"_blank\");\n}\n\nfunction renderRow(resultsSlice) {\n  return (\n    <Stack mt={4} direction=\"row\" spacing={12} justify=\"center\">\n      <StatGroup>\n        {resultsSlice.map((result, index) => {\n          let color = \"\";\n          const val = parseFloat(result[1]);\n          if (val > 0.2) {\n            color = \"green\";\n          } else if (val < 0.09) {\n            color = \"red\";\n          } else {\n            color = \"yellow\";\n          }\n          return (\n            <Stat\n              style={{ cursor: \"pointer\" }}\n              key={index}\n              m={4}\n              onClick={() => {\n                newTab(`https://www.thesaurus.com/browse/${result[0]}`);\n              }}\n            >\n              <StatLabel>\n                {result[0].charAt(0).toUpperCase() + result[0].slice(1)}\n              </StatLabel>\n              <StatNumber color={useColorModeValue(`${color}.500`)}>\n                {result[1]}\n              </StatNumber>\n            </Stat>\n          );\n        })}\n      </StatGroup>\n    </Stack>\n  );\n}\n\nfunction renderResults(results) {\n  const arr = Object.entries(results);\n  let rows = [];\n  let i = 0;\n  for (i = 0; i < arr.length; i += 5) {\n    rows[rows.length] = arr.slice(i, i + 5);\n  }\n  return rows.map((row) => {\n    return renderRow(row);\n  });\n}\n\nfunction ResultsList({ results }) {\n  return <>{results !== {} && renderResults(results)}</>;\n}\n\nexport default ResultsList;\n","import React from \"react\";\r\nimport { Box, Container, ChakraProvider } from \"@chakra-ui/react\";\r\nimport { withFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Header, Footer } from \"./components/HeaderAndFooter\";\r\nimport ExampleLinks from \"./components/ExampleLinks\";\r\nimport UserInput from \"./components/UserInput\";\r\nimport ResultsList from \"./components/ResultsList\";\r\nimport \"./App.css\";\r\n\r\nconst APIgateway = \"https://gateway-service-fvwxmbq4sq-ue.a.run.app\";\r\n\r\nconst ERR_MSGS = {\r\n  urlMissing: \"URL is required\",\r\n  numWordsMissing: \"# of keywords is required\",\r\n  urlInvalid: \"Invalid URL format\",\r\n};\r\n\r\nconst Schema = Yup.object().shape({\r\n  url: Yup.string().url(ERR_MSGS.urlInvalid).required(ERR_MSGS.urlMissing),\r\n  num_words: Yup.number().required(ERR_MSGS.numWordsMissing),\r\n});\r\n\r\nfunction UnconnectedApp({ errors, handleSubmit, setFieldValue, values }) {\r\n  const url = values.url;\r\n  const num_words = values.num_words;\r\n  const asyncError = values.asyncError;\r\n\r\n  function validateURL() {\r\n    try {\r\n      Schema.validateSyncAt(\"url\", { url: url });\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  let styles = {\r\n    main: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      width: \"100vw\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container as=\"div\" style={styles.main}>\r\n        <Box\r\n          as=\"section\"\r\n          pt={{ base: \"4rem\", md: \"6rem\" }}\r\n          pb={{ base: \"0\", md: \"5rem\" }}\r\n          width=\"100vw\"\r\n        >\r\n          <Box\r\n            textAlign=\"center\"\r\n            display=\"flex\"\r\n            flexDirection=\"column\"\r\n            id=\"centerBox\"\r\n          >\r\n            <Header />\r\n            <UserInput\r\n              url={url}\r\n              num_words={num_words}\r\n              isLoading={values.isLoading}\r\n              errors={errors}\r\n              handleSubmit={handleSubmit}\r\n              setFieldValue={setFieldValue}\r\n              validateURL={validateURL}\r\n              asyncError={asyncError}\r\n            />\r\n            <ExampleLinks setFieldValue={setFieldValue} />\r\n            <ResultsList results={values.results} />\r\n            <Footer />\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const EnhancedApp = withFormik({\r\n  enableReinitialize: true,\r\n  handleSubmit: async ({ url, num_words }, { setFieldValue }) => {\r\n    setFieldValue(\"isLoading\", true);\r\n    var encoded_url = encodeURIComponent(url);\r\n    const request = `/keywords/${encoded_url}/${num_words}`;\r\n    fetch(APIgateway + request) // APIgateway + request\r\n      .then(async (res) => {\r\n        if (res.status !== 200) {\r\n          const message = await res.text();\r\n          throw new Error(message);\r\n        }\r\n        setFieldValue(\"isLoading\", false);\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setFieldValue(\"asyncError\", null);\r\n        setFieldValue(\"results\", data);\r\n      })\r\n      .catch((e) => {\r\n        setFieldValue(\"isLoading\", false);\r\n        setFieldValue(\"asyncError\", e.message);\r\n        return {\r\n          error: true,\r\n          status: e.response && e.response.status,\r\n          message: e.response && e.response.data,\r\n        };\r\n      });\r\n  },\r\n  mapPropsToValues: (props) => ({\r\n    url: \"\",\r\n    num_words: 10,\r\n    results: [],\r\n    isLoading: false,\r\n  }),\r\n  validationSchema: () => Schema,\r\n  validateOnBlur: false,\r\n  validateOnChange: false,\r\n})(UnconnectedApp);\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider>\r\n      <EnhancedApp />\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","indeedLink","require","APIgateway","newTab","url","window","open","App","props","state","loading","buttonClickHandler","bind","handleChange","handleLinkClick","e","this","document","getElementById","innerHTML","console","log","encoded_url","encodeURIComponent","request","setState","fetch","then","res","json","data","JSON","stringify","catch","err","target","id","value","trim","Container","component","maxWidth","Typography","variant","TextField","label","onChange","required","fullWidth","CircularProgress","color","Button","onClick","style","minWidth","disabled","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4553753d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport {\r\n  Button,\r\n  Typography,\r\n  TextField,\r\n  Container,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nvar URLSafeBase64 = require(\"urlsafe-base64\");\r\n\r\n// add links as we add support\r\nconst indeedLink =\r\n  \"https://ca.indeed.com/jobs?q=software%20developer&l=Toronto%2C%20ON&radius=25&ts=1588911978357&rq=1&rsIdx=0&vjk=53a4df7deb71fecf&advn=209420522549189\";\r\nconst glassdoorLink = \"\";\r\nconst googlecareersLink = \"\";\r\nconst linkedinLink = \"\";\r\nconst APIgateway = \"https://gateway-service-fvwxmbq4sq-ue.a.run.app\";\r\n\r\nfunction newTab(url) {\r\n  window.open(url, \"_blank\");\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      url: \"\",\r\n      loading: false,\r\n    };\r\n    this.buttonClickHandler = this.buttonClickHandler.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleLinkClick = this.handleLinkClick.bind(this);\r\n  }\r\n\r\n  buttonClickHandler(e) {\r\n    if (this.state.url == \"\") {\r\n      document.getElementById(\"error\").innerHTML = \"Please enter a URL.\";\r\n    } else {\r\n      var url = this.state.url;\r\n      console.log(url);\r\n      var encoded_url = encodeURIComponent(url);\r\n      console.log(encoded_url);\r\n      const request = \"/keywords/\" + encoded_url + \"/10\";\r\n      console.log(\"Request: \" + APIgateway + request);\r\n      this.setState({ loading: true });\r\n      fetch(APIgateway + request) // APIgateway + request\r\n        .then((res) => {\r\n          this.setState({ loading: false });\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(data);\r\n          document.getElementById(\"results\").innerHTML = JSON.stringify(data);\r\n        })\r\n        .catch((err) => {\r\n          this.setState({ loading: false });\r\n          console.log(err);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  }\r\n\r\n  handleLinkClick(e) {\r\n    console.log(e.target.innerHTML.trim());\r\n    switch (e.target.innerHTML.trim()) {\r\n      case \"Indeed\":\r\n        this.setState({ url: indeedLink });\r\n        newTab(indeedLink);\r\n        break;\r\n      case \"GlassDoor\":\r\n        this.setState({ url: glassdoorLink });\r\n        newTab(glassdoorLink);\r\n        break;\r\n      case \"Google Careers\":\r\n        this.setState({ url: googlecareersLink });\r\n        newTab(googlecareersLink);\r\n        break;\r\n      case \"LinkedIn\":\r\n        this.setState({ url: linkedinLink });\r\n        newTab(linkedinLink);\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    //const { Button, TextField, Box } = MaterialUI;\r\n    const buttonWidth = \"170px\";\r\n    return (\r\n      <div>\r\n        <center>\r\n          <Container component=\"main\" maxWidth=\"xs\">\r\n            <Typography component=\"h1\" variant=\"h4\">\r\n              {\" \"}\r\n              Welcome to ResumeWords{\" \"}\r\n            </Typography>{\" \"}\r\n            <br />\r\n            <Typography component=\"h5\">\r\n              Paste URL below, click \"Submit\" and wait for your results. Make\r\n              sure to include those words in your resume or cover letter!\r\n            </Typography>{\" \"}\r\n            <br />\r\n            <TextField\r\n              id=\"url\"\r\n              label=\"URL\"\r\n              onChange={this.handleChange}\r\n              value={this.state.url}\r\n              required\r\n              fullWidth\r\n            />{\" \"}\r\n            <br /> <br />\r\n            {/* <Button variant=\"contained\" color=\"secondary\" onClick={this.buttonClickHandler}> Submit </Button> <br /> <br /> */}\r\n            {this.state.loading ? (\r\n              <CircularProgress color=\"secondary\" />\r\n            ) : (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={this.buttonClickHandler}\r\n              >\r\n                {\" \"}\r\n                Submit{\" \"}\r\n              </Button>\r\n            )}{\" \"}\r\n            <br /> <br />\r\n            <Typography id=\"error\" component=\"h5\" color=\"error\">\r\n              {\" \"}\r\n            </Typography>\r\n            <div id=\"results\"> </div> <br /> <br />\r\n            <Typography id=\"examples\" component=\"h1\" variant=\"h5\">\r\n              {\" \"}\r\n              Example Links:{\" \"}\r\n            </Typography>{\" \"}\r\n            <br />\r\n            <Button\r\n              id=\"indeed\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ minWidth: buttonWidth }}\r\n              onClick={this.handleLinkClick}\r\n              value={indeedLink}\r\n            >\r\n              {\" \"}\r\n              Indeed{\" \"}\r\n            </Button>{\" \"}\r\n            <br /> <br />\r\n            <Button\r\n              id=\"glassdoor\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ minWidth: buttonWidth }}\r\n              onClick={this.handleLinkClick}\r\n              disabled\r\n            >\r\n              {\" \"}\r\n              GlassDoor{\" \"}\r\n            </Button>{\" \"}\r\n            <br /> <br />\r\n            <Button\r\n              id=\"googlecareers\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ minWidth: buttonWidth }}\r\n              onClick={this.handleLinkClick}\r\n              disabled\r\n            >\r\n              {\" \"}\r\n              Google Careers{\" \"}\r\n            </Button>{\" \"}\r\n            <br /> <br />\r\n            <Button\r\n              id=\"linkedin\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ minWidth: buttonWidth }}\r\n              onClick={this.handleLinkClick}\r\n              disabled\r\n            >\r\n              {\" \"}\r\n              LinkedIn{\" \"}\r\n            </Button>{\" \"}\r\n            <br /> <br />\r\n          </Container>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//ReactDOM.render(<ResumeWords />, document.getElementById(\"ResumeWords\"));\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
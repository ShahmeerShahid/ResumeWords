{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","indeedLink","require","newTab","url","window","open","String","prototype","capitalize","this","charAt","toUpperCase","slice","App","props","state","loading","results","error","buttonClickHandler","bind","handleChange","handleLinkClick","e","setState","request","encodeURIComponent","fetch","then","res","json","data","console","log","catch","err","target","id","value","innerHTML","trim","Container","component","maxWidth","Typography","variant","TextField","label","onChange","required","fullWidth","CircularProgress","color","Button","onClick","List","dense","Object","keys","map","key","i","ListItem","button","event","ListItemText","primary","secondary","values","style","minWidth","disabled","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.471cb867.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  Button,\n  Typography,\n  TextField,\n  Container,\n  CircularProgress,\n  List,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { AnimatedList } from \"react-animated-list\";\n\nvar URLSafeBase64 = require(\"urlsafe-base64\");\n\n// add links as we add support\nconst indeedLink =\n  \"https://ca.indeed.com/viewjob?jk=8b4d91c8af8bb0e0&tk=1e8e4ut16584q800&from=serp&vjs=3&advn=3565145538192372&adid=254279523&sjdu=i6xVERweJM_pVUvgf-MzuSNjPrzy7_LNnt0n8OvPVhl69iaJUOxN_OOj2lFqvl9K\";\nconst glassdoorLink = \"\";\nconst googlecareersLink = \"\";\nconst linkedinLink = \"\";\nconst APIgateway = \"https://gateway-service-fvwxmbq4sq-ue.a.run.app\";\n\nfunction newTab(url) {\n  window.open(url, \"_blank\");\n}\n\nString.prototype.capitalize = function () {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: \"\",\n      loading: false,\n      results: {},\n      error: \"\",\n    };\n    this.buttonClickHandler = this.buttonClickHandler.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleLinkClick = this.handleLinkClick.bind(this);\n  }\n\n  buttonClickHandler(e) {\n    if (this.state.url == \"\") {\n      this.setState({ error: \"Please enter a URL\" });\n    } else {\n      this.setState({ results: {}, error: \"\" });\n      var url = this.state.url;\n      var encoded_url = encodeURIComponent(url);\n      const request = \"/keywords/\" + encoded_url + \"/10\";\n      this.setState({ loading: true });\n      fetch(APIgateway + request) // APIgateway + request\n        .then((res) => {\n          this.setState({ loading: false });\n          return res.json();\n        })\n        .then((data) => {\n          console.log(data);\n          // document.getElementById(\"results\").innerHTML = JSON.stringify(data);\n          this.setState({ results: data });\n        })\n        .catch((err) => {\n          this.setState({ loading: false });\n          console.log(err);\n        });\n    }\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.id]: e.target.value });\n  }\n\n  handleLinkClick(e) {\n    switch (e.target.innerHTML.trim()) {\n      case \"Indeed\":\n        this.setState({ url: indeedLink });\n        newTab(indeedLink);\n        break;\n      case \"GlassDoor\":\n        this.setState({ url: glassdoorLink });\n        newTab(glassdoorLink);\n        break;\n      case \"Google Careers\":\n        this.setState({ url: googlecareersLink });\n        newTab(googlecareersLink);\n        break;\n      case \"LinkedIn\":\n        this.setState({ url: linkedinLink });\n        newTab(linkedinLink);\n        break;\n    }\n  }\n\n  render() {\n    //const { Button, TextField, Box } = MaterialUI;\n    const buttonWidth = \"170px\";\n    return (\n      <div>\n        <center>\n          <Container component=\"main\" maxWidth=\"xs\">\n            <Typography component=\"h1\" variant=\"h4\">\n              {\" \"}\n              Welcome to ResumeWords{\" \"}\n            </Typography>{\" \"}\n            <br />\n            <Typography component=\"h5\">\n              Paste URL below, click \"Submit\" and wait for your results. Make\n              sure to include those words in your resume or cover letter!\n            </Typography>{\" \"}\n            <br />\n            <TextField\n              id=\"url\"\n              label=\"URL\"\n              onChange={this.handleChange}\n              value={this.state.url}\n              required\n              fullWidth\n            />{\" \"}\n            <br /> <br />\n            {/* <Button variant=\"contained\" color=\"secondary\" onClick={this.buttonClickHandler}> Submit </Button> <br /> <br /> */}\n            {this.state.loading ? (\n              <CircularProgress color=\"secondary\" />\n            ) : (\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={this.buttonClickHandler}\n              >\n                {\" \"}\n                Submit{\" \"}\n              </Button>\n            )}{\" \"}\n            <br /> <br />\n            <Typography id=\"error\" component=\"h5\" color=\"error\">\n              {this.state.error}\n            </Typography>\n            <div id=\"results\">\n              {this.state.results != {} ? (\n                <List dense={true}>\n                  {Object.keys(this.state.results).map((key, i) => (\n                    <ListItem\n                      button\n                      key={key}\n                      onClick={(event) => {\n                        newTab(\"https://www.thesaurus.com/browse/\" + key);\n                      }}\n                    >\n                      <ListItemText\n                        primary={key.capitalize()}\n                        secondary={\n                          \"Score: \" + Object.values(this.state.results)[i]\n                        }\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n              ) : null}\n            </div>{\" \"}\n            <br /> <br />\n            <Typography id=\"examples\" component=\"h1\" variant=\"h5\">\n              {\" \"}\n              Example Links:{\" \"}\n            </Typography>{\" \"}\n            <br />\n            <Button\n              id=\"indeed\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ minWidth: buttonWidth }}\n              onClick={this.handleLinkClick}\n              value={indeedLink}\n            >\n              {\" \"}\n              Indeed{\" \"}\n            </Button>{\" \"}\n            <br /> <br />\n            <Button\n              id=\"glassdoor\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ minWidth: buttonWidth }}\n              onClick={this.handleLinkClick}\n              disabled\n            >\n              {\" \"}\n              GlassDoor{\" \"}\n            </Button>{\" \"}\n            <br /> <br />\n            <Button\n              id=\"googlecareers\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ minWidth: buttonWidth }}\n              onClick={this.handleLinkClick}\n              disabled\n            >\n              {\" \"}\n              Google Careers{\" \"}\n            </Button>{\" \"}\n            <br /> <br />\n            <Button\n              id=\"linkedin\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ minWidth: buttonWidth }}\n              onClick={this.handleLinkClick}\n              disabled\n            >\n              {\" \"}\n              LinkedIn{\" \"}\n            </Button>{\" \"}\n            <br /> <br />\n          </Container>\n        </center>\n      </div>\n    );\n  }\n}\n//ReactDOM.render(<ResumeWords />, document.getElementById(\"ResumeWords\"));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
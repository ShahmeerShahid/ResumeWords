{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","indeedLink","linkedinLink","newTab","url","window","open","String","prototype","capitalize","this","charAt","toUpperCase","slice","App","props","state","loading","results","error","buttonClickHandler","bind","handleChange","handleLinkClick","e","setState","request","encodeURIComponent","fetch","then","res","json","data","console","log","catch","err","target","id","value","innerHTML","trim","Container","component","maxWidth","Typography","variant","TextField","label","onChange","required","fullWidth","CircularProgress","color","Button","onClick","List","dense","Object","keys","map","key","i","ListItem","button","event","ListItemText","primary","secondary","values","style","minWidth","disabled","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e0cf185d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport {\r\n    Button,\r\n    Typography,\r\n    TextField,\r\n    Container,\r\n    CircularProgress,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n} from \"@material-ui/core\";\r\n\r\n\r\n// add links as we add support\r\nconst indeedLink =\r\n    \"https://ca.indeed.com/viewjob?jk=8b4d91c8af8bb0e0&tk=1e8e4ut16584q800&from=serp&vjs=3&advn=3565145538192372&adid=254279523&sjdu=i6xVERweJM_pVUvgf-MzuSNjPrzy7_LNnt0n8OvPVhl69iaJUOxN_OOj2lFqvl9K\";\r\nconst glassdoorLink = \"\";\r\nconst googlecareersLink = \"\";\r\nconst linkedinLink = \"https://www.linkedin.com/jobs/view/1824287174\";\r\nconst APIgateway = \"https://gateway-service-fvwxmbq4sq-ue.a.run.app\";\r\n\r\nfunction newTab(url) {\r\n    window.open(url, \"_blank\");\r\n}\r\n\r\nString.prototype.capitalize = function () {\r\n    return this.charAt(0).toUpperCase() + this.slice(1);\r\n};\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            url: \"\",\r\n            loading: false,\r\n            results: {},\r\n            error: \"\",\r\n        };\r\n        this.buttonClickHandler = this.buttonClickHandler.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLinkClick = this.handleLinkClick.bind(this);\r\n    }\r\n\r\n    buttonClickHandler(e) {\r\n        if (this.state.url == \"\") {\r\n            this.setState({ error: \"Please enter a URL\" });\r\n        } else {\r\n            this.setState({ results: {}, error: \"\" });\r\n            var url = this.state.url;\r\n            var encoded_url = encodeURIComponent(url);\r\n            const request = \"/keywords/\" + encoded_url + \"/50\";\r\n            this.setState({ loading: true });\r\n            fetch(APIgateway + request) // APIgateway + request\r\n                .then((res) => {\r\n                    this.setState({ loading: false });\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    // document.getElementById(\"results\").innerHTML = JSON.stringify(data);\r\n                    this.setState({ results: data });\r\n                })\r\n                .catch((err) => {\r\n                    this.setState({ loading: false });\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    handleLinkClick(e) {\r\n        this.setState({ results: {} });\r\n        switch (e.target.innerHTML.trim()) {\r\n            case \"Indeed\":\r\n                this.setState({ url: indeedLink });\r\n                newTab(indeedLink);\r\n                break;\r\n            case \"GlassDoor\":\r\n                this.setState({ url: glassdoorLink });\r\n                newTab(glassdoorLink);\r\n                break;\r\n            case \"Google Careers\":\r\n                this.setState({ url: googlecareersLink });\r\n                newTab(googlecareersLink);\r\n                break;\r\n            case \"LinkedIn\":\r\n                this.setState({ url: linkedinLink });\r\n                newTab(linkedinLink);\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //const { Button, TextField, Box } = MaterialUI;\r\n        const buttonWidth = \"170px\";\r\n        return (\r\n            <div>\r\n                <center>\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                        <Typography component=\"h1\" variant=\"h4\">\r\n                            {\" \"}\r\n                            Welcome to ResumeWords{\" \"}\r\n                        </Typography>{\" \"}\r\n                        <br />\r\n                        <Typography component=\"h5\">\r\n                            Paste URL below, click \"Submit\" and wait for your\r\n                            results. Make sure to include those words in your\r\n                            resume or cover letter!\r\n                        </Typography>{\" \"}\r\n                        <br />\r\n                        <TextField\r\n                            id=\"url\"\r\n                            label=\"URL\"\r\n                            onChange={this.handleChange}\r\n                            value={this.state.url}\r\n                            required\r\n                            fullWidth\r\n                        />{\" \"}\r\n                        <br /> <br />\r\n                        {/* <Button variant=\"contained\" color=\"secondary\" onClick={this.buttonClickHandler}> Submit </Button> <br /> <br /> */}\r\n                        {this.state.loading ? (\r\n                            <CircularProgress color=\"secondary\" />\r\n                        ) : (\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={this.buttonClickHandler}\r\n                            >\r\n                                {\" \"}\r\n                                Submit{\" \"}\r\n                            </Button>\r\n                        )}{\" \"}\r\n                        <br /> <br />\r\n                        <Typography id=\"error\" component=\"h5\" color=\"error\">\r\n                            {this.state.error}\r\n                        </Typography>\r\n                        <div id=\"results\">\r\n                            {this.state.results != {} ? (\r\n                                <List dense={true}>\r\n                                    {Object.keys(this.state.results).map(\r\n                                        (key, i) => (\r\n                                            <ListItem\r\n                                                button\r\n                                                key={key}\r\n                                                onClick={(event) => {\r\n                                                    newTab(\r\n                                                        \"https://www.thesaurus.com/browse/\" +\r\n                                                            key\r\n                                                    );\r\n                                                }}\r\n                                            >\r\n                                                <ListItemText\r\n                                                    primary={key.capitalize()}\r\n                                                    secondary={\r\n                                                        \"Score: \" +\r\n                                                        Object.values(\r\n                                                            this.state.results\r\n                                                        )[i]\r\n                                                    }\r\n                                                />\r\n                                            </ListItem>\r\n                                        )\r\n                                    )}\r\n                                </List>\r\n                            ) : null}\r\n                        </div>{\" \"}\r\n                        <br /> <br />\r\n                        <Typography id=\"examples\" component=\"h1\" variant=\"h5\">\r\n                            {\" \"}\r\n                            Example Links:{\" \"}\r\n                        </Typography>{\" \"}\r\n                        <br />\r\n                        <Button\r\n                            id=\"linkedin\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{ minWidth: buttonWidth }}\r\n                            onClick={this.handleLinkClick}\r\n                            value={linkedinLink}\r\n                        >\r\n                            {\" \"}\r\n                            LinkedIn{\" \"}\r\n                        </Button>{\" \"}\r\n                        <br /> <br />\r\n                        <Button\r\n                            id=\"indeed\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{ minWidth: buttonWidth }}\r\n                            onClick={this.handleLinkClick}\r\n                            value={indeedLink}\r\n                        >\r\n                            {\" \"}\r\n                            Indeed{\" \"}\r\n                        </Button>{\" \"}\r\n                        <br /> <br />\r\n                        <Button\r\n                            id=\"glassdoor\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{ minWidth: buttonWidth }}\r\n                            onClick={this.handleLinkClick}\r\n                            disabled\r\n                        >\r\n                            {\" \"}\r\n                            GlassDoor{\" \"}\r\n                        </Button>{\" \"}\r\n                        <br /> <br />\r\n                        <Button\r\n                            id=\"googlecareers\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{ minWidth: buttonWidth }}\r\n                            onClick={this.handleLinkClick}\r\n                            disabled\r\n                        >\r\n                            {\" \"}\r\n                            Google Careers{\" \"}\r\n                        </Button>{\" \"}\r\n                        <br /> <br />\r\n                    </Container>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n//ReactDOM.render(<ResumeWords />, document.getElementById(\"ResumeWords\"));\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}